package executor;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.logging.Logger;

import io.netty.util.concurrent.Future;

public class ExecutorDemo {
	
	private static final Logger logger = Logger.getLogger(ExecutorDemo.class.getName());

	public static void main(String[] args) throws ExecutionException, InterruptedException {
		List<Future<String>> futures = new ArrayList<>();
		
		Callable<String> callable = new Callable<String>() {

			@Override
			public String call() throws Exception {
				Thread.sleep(5000);
				return "Hello from " + Thread.currentThread().getName();
			}
			
		};
		ExecutorService executorService = Executors.newFixedThreadPool(5);
		for (int i = 0; i < 100; i++) {
			java.util.concurrent.Future<String> future = executorService.submit(callable);
			futures.add(future);
		}
		futures.forEach(f->{
			logger.info(f.get());

		});

		}
		
	}

